---
name: ci
on: pull_request
jobs:
  yamllint:
    name: yamllint
    runs-on: ubuntu-latest
    steps:
      - name: Check out code into the Go module directory
        uses: actions/checkout@v2
      - name: Setup Python
        uses: actions/setup-python@v1
      - name: Install yamllint
        run: pip install --user yamllint
      - name: Run yamllint
        run: ~/.local/bin/yamllint -c .yamllint.yml --strict .
  build:
    name: build
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-go@v1
        with:
          go-version: 1.13.4
      - run: |
          go build -race  ./...
  build-win:
    name: build-win
    runs-on: windows-latest
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-go@v1
        with:
          go-version: 1.13.4
      - run: |
          go build -race  ./...
  build-osx:
    name: build-osx
    runs-on: macos-latest
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-go@v1
        with:
          go-version: 1.13.4
      - run: |
          go build -race  ./...
  test:
    name: test
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-go@v1
        with:
          go-version: 1.13.4
      - name: Install gotestsum
        run: go get gotest.tools/gotestsum@v0.4.0
      - name: Run tests
        run: |
          eval $(go env)
          mkdir -p ~/junit/
          ${GOPATH}/bin/gotestsum --junitfile ~/junit/unit-tests.xml -- -race -short $(go list ./...)
  test-win:
    name: test-win
    runs-on: windows-latest
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-go@v1
        with:
          go-version: 1.13.4
      - name: Install gotestsum
        run: go get gotest.tools/gotestsum@v0.4.0
      - name: Run tests
        run: |
          $env:Path += ";$(go env GOPATH)\bin"
          mkdir $home/junit
          gotestsum --junitfile $home\junit\unit-tests.xml -- -race -short $(go list .\...)
  test-osx:
    name: test-osx
    runs-on: macos-latest
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-go@v1
        with:
          go-version: 1.13.4
      - name: Install gotestsum
        run: go get gotest.tools/gotestsum@v0.4.0
      - name: Run tests
        run: |
          eval $(go env)
          mkdir -p ~/junit/
          ${GOPATH}/bin/gotestsum --junitfile ~/junit/unit-tests.xml -- -race -short $(go list ./...)
  golangci-lint:
    name: golangci-lint
    runs-on: ubuntu-latest
    env:
      GOLANGCI_LINT_CONTAINER: golangci/golangci-lint:v1.28.1
    steps:
      - name: Check out code into the Go module directory
        uses: actions/checkout@v2
      - name: Pull golangci-lint docker container
        run: docker pull ${GOLANGCI_LINT_CONTAINER}
      - name: Run golangci-lint
        run: docker run --rm -v $(pwd):/app -w /app ${GOLANGCI_LINT_CONTAINER} golangci-lint run

  excludeFmtErrorf:
    name: exclude fmt.Errorf
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Exclude fmt.Errorf
        run: |
          if grep -r --include=*.go --exclude=*.pb.go fmt.Errorf . ; then
           echo "Please use errors.Errorf (or errors.New or errors.Wrap or errors.Wrapf) as appropriate rather than fmt.Errorf"
           exit 1
          fi

  restrictNSMDeps:
    name: Restrict dependencies on github.com/networkservicemesh/*
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Restrict dependencies on github.com/networkservicemesh/*
        run: |
          for i in $(grep github.com/networkservicemesh/ go.mod |grep -v '^module' | sed 's;.*\(github.com\/networkservicemesh\/[a-zA-z\/]*\).*;\1;g' | sort -u);do
            if [ "${i}" != "github.com/networkservicemesh/api" ]; then
              echo Dependency on "${i}" is forbidden
              exit 1
            fi
          done

  checkgomod:
    name: check go.mod and go.sum
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-go@v1
        with:
          go-version: 1.13.4
      - run: go mod tidy
      - name: Check for changes in go.mod or go.sum
        run: |
          git diff --name-only --exit-code go.mod || ( echo "Run go tidy" && false )
          git diff --name-only --exit-code go.sum || ( echo "Run go tidy" && false )

  gogenerate:
    name: Check generated files
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: arduino/setup-protoc@master
        with:
          version: '3.8.0'
      - uses: actions/setup-go@v1
        with:
          go-version: 1.13
      - name: Install proto-gen-go
        run: go get -u github.com/golang/protobuf/protoc-gen-go@v1.3.3
      - name: Install proto-gen-go
        run: go get github.com/searKing/golang/tools/cmd/go-syncmap
      - name: Generate files
        run: go generate ./...
      - name: Check for changes in generated code
        run: |
          git diff -- '*.pb.go' || ( echo "Rerun go generate ./... locally and resubmit" && false )
          git diff -- '*.gen.go' || ( echo "Rerun go generate ./... locally and resubmit" && false )
  excludereplace:
    name: Exclude Replace in go.mod
    runs-on: ubuntu-latest
    steps:
      - name: Check out the code
        uses: actions/checkout@v2
      - name: Exclude replace in go.mod
        run: |
          grep ^replace go.mod || exit 0
          exit 1
  captureRunEnv:
    name: Capture CI Run Env
    runs-on: ubuntu-latest
    steps:
      - run: printenv
  automerge:
    name: automerge
    runs-on: ubuntu-latest
    needs:
      - build
      - test
    if: github.actor == 'nsmbot' && github.base_ref == 'master' && github.event_name == 'pull_request'
    steps:
      - name: Check out the code
        uses: actions/checkout@v2
      - name: Fetch master
        run: |
          git remote -v
          git fetch --depth=1 origin master
      - name: Only allow go.mod and go.sum changes
        run: |
          find . -type f ! -name 'go.mod' ! -name 'go.sum' -exec git diff --exit-code origin/master -- {} +
      - name: Automerge nsmbot PR
        uses: ridedott/merge-me-action@master
        with:
          GITHUB_LOGIN: nsmbot
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  update-dependent-repositories:
    strategy:
      matrix:
        repository: [cmd-registry-memory, cmd-registry-proxy-dns, sdk-kernel, sdk-vppagent, cmd-nsmgr]
    name: Update ${{ matrix.repository }}
    runs-on: ubuntu-latest
    needs:
      - automerge
    if: github.actor == 'nsmbot' && github.base_ref == 'master' && github.event_name == 'pull_request'
    steps:
      - name: Checkout ${{ github.repository }}
        uses: actions/checkout@v2
        with:
          path: ${{ github.repository }}
          repository: ${{ github.repository }}
          token: ${{ secrets.NSM_BOT_GITHUB_TOKEN }}
      - name: Find merged PR
        uses: jwalton/gh-find-current-pr@v1
        id: findPr
        with:
          github-token: ${{ github.token }}
      - name: Create commit message
        working-directory: ${{ github.repository }}
        run: |
          echo "Update go.mod and go.sum to latest version from ${{ github.repository }}@master ${{ github.repository }}#${{ steps.findPr.outputs.pr }}" >> /tmp/commit-message
          echo "" >> /tmp/commit-message
          echo "${{ github.repository }} PR link: https://github.com/${{ github.repository }}/pull/${{ steps.findPr.outputs.pr }}" >> /tmp/commit-message
          echo "" >> /tmp/commit-message
          echo "${{ github.repository }} commit message:" >> /tmp/commit-message
          git log -1 >> /tmp/commit-message
          echo "Commit Message:"
          cat /tmp/commit-message

      - name: Checkout networkservicemesh/${{ matrix.repository }}
        uses: actions/checkout@v2
        with:
          path: networkservicemesh/${{ matrix.repository }}
          repository: networkservicemesh/${{ matrix.repository }}
          token: ${{ secrets.NSM_BOT_GITHUB_TOKEN }}
      - uses: actions/setup-go@v1
        with:
          go-version: 1.13.4
      - name: Update ${{ github.repository }} locally
        working-directory: networkservicemesh/${{ matrix.repository }}
        run: |
          GOPROXY=direct go get -u github.com/${{ github.repository }}
          go mod tidy
          git diff
      - name: Push update to the ${{ matrix.repository }}
        working-directory: networkservicemesh/${{ matrix.repository }}
        run: |
          echo Starting to update repositotry ${{ matrix.repository }}
          git config --global user.email "nsmbot@networkservicmesh.io"
          git config --global user.name "NSMBot"
          git add go.mod go.sum
          git commit -s -F /tmp/commit-message
          git checkout -b update/${{ github.repository }}
          git push -f origin update/${{ github.repository }}
