---
name: ci
on: pull_request
jobs:
  yamllint:
    name: yamllint
    runs-on: ubuntu-latest
    steps:
      - name: Check out code into the Go module directory
        uses: actions/checkout@v1
      - name: Setup Python
        uses: actions/setup-python@v1
      - name: Install yamllint
        run: pip install --user yamllint
      - name: Run yamllint
        run: ~/.local/bin/yamllint -c .yamllint.yml --strict .
  shellcheck:
    name: shellcheck
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v1
      - name: shellcheck
        uses: azohra/shell-linter@v0.2.0
  build:
    name: build
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v1
      - uses: actions/setup-go@v1
        with:
          go-version: 1.13.4
      - run: |
          go build -race  ./...
  test:
    name: test
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v1
      - uses: actions/setup-go@v1
        with:
          go-version: 1.13.4
      - name: Install gotestsum
        run: go get gotest.tools/gotestsum@v0.4.0
      - name: Run tests
        run: |
          eval $(go env)
          mkdir -p ~/junit/
          ${GOPATH}/bin/gotestsum --junitfile ~/junit/unit-tests.xml -- -race -short $(go list ./...)
  golangci-lint:
    name: golangci-lint
    runs-on: ubuntu-latest
    steps:
      - name: Check out code into the Go module directory
        uses: actions/checkout@v1
      - name: golangci-lint
        uses: Mushus/golangci-linter@v1

  excludeFmtErrorf:
    name: exclude fmt.Errorf
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v1
      - name: Exclude fmt.Errorf
        run: |
          if grep -r --include=*.go fmt.Errorf . ; then
           echo "Please use errors.Errorf (or errors.New or errors.Wrap or errors.Wrapf) as appropriate rather than fmt.Errorf"
           exit 1
          fi

  restrictNSMDeps:
    name: Restrict dependencies on github.com/networkservicemesh/*
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v1
      - name: Restrict dependencies on github.com/networkservicemesh/*
        run: |
          for i in $(grep github.com/networkservicemesh/ go.mod |grep -v '^module' | sed 's;.*\(github.com\/networkservicemesh\/[a-zA-z\/]*\).*;\1;g' | sort -u);do
            if [ "${i}" != "github.com/networkservicemesh/api" ]; then
              echo Dependency on "${i}" is forbidden
              exit 1
            fi
          done

  checkgomod:
    name: check go.mod and go.sum
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v1
      - uses: actions/setup-go@v1
        with:
          go-version: 1.13.4
      - run: go mod tidy
      - name: Check for changes in go.mod or go.sum
        run: |
          git diff --name-only --exit-code go.mod || ( echo "Run go tidy" && false )
          git diff --name-only --exit-code go.sum || ( echo "Run go tidy" && false )
  license:
    name: license header check
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v1
      - uses: actions/setup-go@v1
        with:
          go-version: 1.13.4
      - name: Install go-header
        run: 'go get github.com/denis-tingajkin/go-header@v0.2.1'
      - name: Run go-header
        run: |
          eval $(go env)
          ${GOPATH}/bin/go-header
