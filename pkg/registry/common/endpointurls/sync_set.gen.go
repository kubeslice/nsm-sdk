// Code generated by "go-syncmap -output sync_set.gen.go -type Set<net/url.URL,struct{}>"; DO NOT EDIT.

package endpointurls

import (
	"net/url"
	"sync"
)

func _() {
	// An "cannot convert Set literal (type Set) to type sync.Map" compiler error signifies that the base type have changed.
	// Re-run the go-syncmap command to generate them again.
	_ = (sync.Map)(Set{})
}

var _nil_Set_struct___value = func() (val struct{}) { return }()

func (m *Set) Store(key url.URL, value struct{}) {
	(*sync.Map)(m).Store(key, value)
}

func (m *Set) LoadOrStore(key url.URL, value struct{}) (struct{}, bool) {
	actual, loaded := (*sync.Map)(m).LoadOrStore(key, value)
	if actual == nil {
		return _nil_Set_struct___value, loaded
	}
	return actual.(struct{}), loaded
}

func (m *Set) Load(key url.URL) (struct{}, bool) {
	value, ok := (*sync.Map)(m).Load(key)
	if value == nil {
		return _nil_Set_struct___value, ok
	}
	return value.(struct{}), ok
}

func (m *Set) Delete(key url.URL) {
	(*sync.Map)(m).Delete(key)
}

func (m *Set) Range(f func(key url.URL, value struct{}) bool) {
	(*sync.Map)(m).Range(func(key, value interface{}) bool {
		return f(key.(url.URL), value.(struct{}))
	})
}
