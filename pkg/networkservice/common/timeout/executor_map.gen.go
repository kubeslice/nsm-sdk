// Code generated by "go-syncmap -output executor_map.gen.go -type executorMap<string,*github.com/edwarnicke/serialize.Executor>"; DO NOT EDIT.

package timeout

import (
	"sync"

	"github.com/edwarnicke/serialize"
)

func _() {
	// An "cannot convert executorMap literal (type executorMap) to type sync.Map" compiler error signifies that the base type have changed.
	// Re-run the go-syncmap command to generate them again.
	_ = (sync.Map)(executorMap{})
}
func (m *executorMap) Store(key string, value *serialize.Executor) {
	(*sync.Map)(m).Store(key, value)
}

func (m *executorMap) LoadOrStore(key string, value *serialize.Executor) (*serialize.Executor, bool) {
	actual, loaded := (*sync.Map)(m).LoadOrStore(key, value)
	if actual == nil {
		return nil, loaded
	}
	return actual.(*serialize.Executor), loaded
}

func (m *executorMap) Load(key string) (*serialize.Executor, bool) {
	value, ok := (*sync.Map)(m).Load(key)
	if value == nil {
		return nil, ok
	}
	return value.(*serialize.Executor), ok
}

func (m *executorMap) Delete(key string) {
	(*sync.Map)(m).Delete(key)
}

func (m *executorMap) Range(f func(key string, value *serialize.Executor) bool) {
	(*sync.Map)(m).Range(func(key, value interface{}) bool {
		return f(key.(string), value.(*serialize.Executor))
	})
}
