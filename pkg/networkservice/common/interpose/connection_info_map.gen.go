// Code generated by "go-syncmap -output connection_info_map.gen.go -type connectionInfoMap<string,connectionInfo>"; DO NOT EDIT.

package interpose

import "sync"

func _() {
	// An "cannot convert connectionInfoMap literal (type connectionInfoMap) to type sync.Map" compiler error signifies that the base type have changed.
	// Re-run the go-syncmap command to generate them again.
	_ = (sync.Map)(connectionInfoMap{})
}

var _nil_connectionInfoMap_connectionInfo_value = func() (val connectionInfo) { return }()

func (m *connectionInfoMap) Store(key string, value connectionInfo) {
	(*sync.Map)(m).Store(key, value)
}

func (m *connectionInfoMap) LoadOrStore(key string, value connectionInfo) (connectionInfo, bool) {
	actual, loaded := (*sync.Map)(m).LoadOrStore(key, value)
	if actual == nil {
		return _nil_connectionInfoMap_connectionInfo_value, loaded
	}
	return actual.(connectionInfo), loaded
}

func (m *connectionInfoMap) Load(key string) (connectionInfo, bool) {
	value, ok := (*sync.Map)(m).Load(key)
	if value == nil {
		return _nil_connectionInfoMap_connectionInfo_value, ok
	}
	return value.(connectionInfo), ok
}

func (m *connectionInfoMap) Delete(key string) {
	(*sync.Map)(m).Delete(key)
}

func (m *connectionInfoMap) Range(f func(key string, value connectionInfo) bool) {
	(*sync.Map)(m).Range(func(key, value interface{}) bool {
		return f(key.(string), value.(connectionInfo))
	})
}
